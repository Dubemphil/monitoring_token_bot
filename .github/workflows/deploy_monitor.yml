name: 'Deploy Solana Monitor - DexScreener Real-Time Version'

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: "solana_monitor_dexscreener"
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: ${{ secrets.EC2_PORT }}
        script: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")
          
          # Docker login
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

          # Stop and remove existing container
          docker stop solana_monitor_dex 2>/dev/null || true
          docker rm solana_monitor_dex 2>/dev/null || true

          # Remove old image
          docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest 2>/dev/null || true

          # Pull latest image with retry logic
          for i in {1..3}; do
            echo "Pull attempt $i..."
            if docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest; then
              echo "✅ Successfully pulled image"
              break
            else
              echo "⚠️ Pull attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Waiting 10 seconds before retry..."
                sleep 10
              else
                echo "❌ Failed to pull image after 3 attempts"
                exit 1
              fi
            fi
          done

          # Create credentials.json from secret
          echo "${{ secrets.GOOGLE_CREDENTIALS_JSON }}" | base64 -d > /home/${{ secrets.EC2_USER }}/credentials.json
          
          # Verify credentials
          if [ ! -f /home/${{ secrets.EC2_USER }}/credentials.json ]; then
            echo "❌ Failed to create credentials.json"
            exit 1
          fi

          # Create logs directory
          mkdir -p /home/${{ secrets.EC2_USER }}/logs
          touch /home/${{ secrets.EC2_USER }}/logs/dexscreener-monitor.log
          touch /home/${{ secrets.EC2_USER }}/logs/milestone-tracking.log
          touch /home/${{ secrets.EC2_USER }}/logs/price-updates.log

          # Run monitoring container
          docker run -d \
            --name solana_monitor_dex \
            --restart unless-stopped \
            --dns 8.8.8.8 \
            --dns 1.1.1.1 \
            -e SPREADSHEET_ID="${{ secrets.SPREADSHEET_ID }}" \
            -e SHEET_NAME="ExclusivePumpfun" \
            -e TICK_INTERVAL_SECONDS="1" \
            -e RATE_LIMIT_MS="100" \
            -v /home/${{ secrets.EC2_USER }}/credentials.json:/app/credentials.json:ro \
            -v /home/${{ secrets.EC2_USER }}/logs:/app/logs \
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest

          # Wait for container to start.
          sleep 15

          # Check container status
          if docker ps | grep -q solana_monitor_dex; then
            echo "✅ Monitor container is running"
            docker logs solana_monitor_dex --tail 30
            
            # Set up log monitoring script
            cat > /home/${{ secrets.EC2_USER }}/monitor_logs.sh << 'LOGSCRIPT'
          #!/bin/bash
          
          docker logs solana_monitor_dex --follow --tail 0 2>&1 | while read line; do
            echo "$line" >> /home/${{ secrets.EC2_USER }}/logs/dexscreener-monitor.log
            
            # Track milestone events
            if echo "$line" | grep -qi "milestone\|crossed\|📈\|📉"; then
              echo "$(date '+%Y-%m-%d %H:%M:%S') $line" >> /home/${{ secrets.EC2_USER }}/logs/milestone-tracking.log
            fi
            
            # Track price updates
            if echo "$line" | grep -qi "updating\|price\|👀"; then
              echo "$(date '+%Y-%m-%d %H:%M:%S') $line" >> /home/${{ secrets.EC2_USER }}/logs/price-updates.log
            fi
          done &
          LOGSCRIPT
            
            chmod +x /home/${{ secrets.EC2_USER }}/monitor_logs.sh
            nohup /home/${{ secrets.EC2_USER }}/monitor_logs.sh > /dev/null 2>&1 &
            
            echo ""
            echo "📋 Log Monitoring Commands:"
            echo "   View all logs: docker logs -f solana_monitor_dex"
            echo "   View main log: tail -f /home/${{ secrets.EC2_USER }}/logs/dexscreener-monitor.log"
            echo "   View milestones: tail -f /home/${{ secrets.EC2_USER }}/logs/milestone-tracking.log"
            echo "   View price updates: tail -f /home/${{ secrets.EC2_USER }}/logs/price-updates.log"
            echo ""
            
          else
            echo "❌ Monitor container failed to start"
            docker logs solana_monitor_dex --tail 50 || true
            exit 1
          fi

          # Save deployment logs
          docker logs solana_monitor_dex --tail 100 > /home/${{ secrets.EC2_USER }}/logs/deploy-$TIMESTAMP.txt 2>&1 || true
          
          # Logout from Docker Hub
          docker logout

          echo "✅ DexScreener Monitor deployed successfully!"
          echo ""
          echo "📊 Monitoring Information:"
          echo "   - Container name: solana_monitor_dex"
          echo "   - Update interval: 1 second (real-time)"
          echo "   - Data source: DexScreener API"
          echo "   - Auto-detection: Column A"
          echo ""
          echo "📋 Useful Commands:"
          echo "   docker logs -f solana_monitor_dex              # Live logs"
          echo "   docker logs solana_monitor_dex --tail 100      # Last 100 lines"
          echo "   docker stats solana_monitor_dex                # Resource usage"
          echo "   docker restart solana_monitor_dex              # Restart container"
          echo ""